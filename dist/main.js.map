{"version":3,"file":"main.js","mappings":"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","sources":["webpack://loscreadoresbackend/external \"dotenv\"","webpack://loscreadoresbackend/webpack/bootstrap","webpack://loscreadoresbackend/webpack/runtime/compat get default export","webpack://loscreadoresbackend/webpack/runtime/define property getters","webpack://loscreadoresbackend/webpack/runtime/hasOwnProperty shorthand","webpack://loscreadoresbackend/external \"tslib\"","webpack://loscreadoresbackend/external \"http\"","webpack://loscreadoresbackend/external \"throng\"","webpack://loscreadoresbackend/external \"bunyan\"","webpack://loscreadoresbackend/./src/config/config.ts","webpack://loscreadoresbackend/external \"compression\"","webpack://loscreadoresbackend/external \"cookie-parser\"","webpack://loscreadoresbackend/external \"express\"","webpack://loscreadoresbackend/external \"helmet\"","webpack://loscreadoresbackend/external \"cors\"","webpack://loscreadoresbackend/external \"mssql\"","webpack://loscreadoresbackend/./src/server/sql/sql-calls-strings.ts","webpack://loscreadoresbackend/./src/server/controllers/helpers-control.ts","webpack://loscreadoresbackend/external \"bcrypt\"","webpack://loscreadoresbackend/external \"jsonwebtoken\"","webpack://loscreadoresbackend/external \"axios\"","webpack://loscreadoresbackend/./src/server/controllers/login-control.ts","webpack://loscreadoresbackend/./src/server/controllers/materiales-control.ts","webpack://loscreadoresbackend/./src/server/lib/connect-to-sql.ts","webpack://loscreadoresbackend/external \"morgan\"","webpack://loscreadoresbackend/./src/server/server.ts","webpack://loscreadoresbackend/./src/server/routes/helpers-routes.ts","webpack://loscreadoresbackend/./src/server/routes/login-routes.ts","webpack://loscreadoresbackend/./src/server/routes/materiales-routes.ts","webpack://loscreadoresbackend/./src/index.ts"],"sourcesContent":["module.exports = require(\"dotenv\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"throng\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bunyan\");","// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('dotenv').config();\r\nimport bunyan from 'bunyan';\r\n\r\nconst version = '0.0.1';\r\n\r\nconst getLogger = (serviceName: string, serviceVersion: string) => \r\nbunyan.createLogger({ name: `${serviceName}:${serviceVersion}` });\r\n\r\nconst config = {\r\n\tdevelopment: {\r\n\t\tPORT: process.env.PORT,\r\n\t\tlink: 'http://localhost:5000/',\r\n        servidorSQL: process.env.SERVIDOR_SQL,\r\n        usuarioSQL: process.env.USUARIO_SQL,\r\n        passwordSQL: process.env.PASSWORD_SQL,\r\n        baseDeDatosSQL: process.env.BASE_DE_DATOS_NAME,\r\n        jwtKey: process.env.JWT_TOKEN_KEY,\r\n        tokenSUNAT: process.env.SUNAT_TOKEN,\r\n\t\tlog: (): bunyan => getLogger('DESARROLLO', version),\r\n\t},\r\n\r\n\tproduction: {\r\n\t\tPORT: process.env.PORT,\r\n\t\tlink: 'http://localhost:5000/',\r\n        servidorSQL: process.env.SERVIDOR_SQL,\r\n        usuarioSQL: process.env.USUARIO_SQL,\r\n        passwordSQL: process.env.PASSWORD_SQL,\r\n        baseDeDatosSQL: process.env.BASE_DE_DATOS_NAME,\r\n        jwtKey: process.env.JWT_TOKEN_KEY,\r\n        tokenSUNAT: process.env.SUNAT_TOKEN,\r\n        log: (): bunyan => getLogger('PRODUCCION', version),\r\n\t},\r\n};\r\n\r\nexport default config;\r\n\r\n\r\n\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"compression\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cookie-parser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"helmet\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cors\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"mssql\");","export const getTodosLosColores = 'SELECT * FROM Color';\r\n\r\nexport const agregarColorProcedure = 'agregar_color';\r\n\r\nexport const modificarColorProcedure = 'modificar_color';\r\n\r\nexport const getColorProcedure = 'get_color';\r\n\r\n//* METODOS PARA USUARIO //\r\nexport const insertarUsuario = 'insertar_usuario';\r\n\r\nexport const getUsuarioSQL = 'get_usuarios';\r\n\r\nexport const darDeAltaUsuarioSQL = 'dar_de_alta_usuario'\r\n\r\nexport const reHabilitarUsuarioSQL = 're_habilitar_usuario'\r\n\r\nexport const eliminarUsuarioSQL = 'eliminar_usuario'\r\n\r\nexport const usuarioExisteLogin = 'comprobar_usuario_login';\r\n\r\nexport const darDeBajaUsuarioSQL = 'dar_de_baja_usuario'","import sql from 'mssql';\r\nimport { Response, Request } from 'express';\r\nimport { Color, Configuracion, Trabajo } from '../lib/interfaces';\r\nimport { agregarColorProcedure, getColorProcedure, getTodosLosColores, modificarColorProcedure } from '../sql/sql-calls-strings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const helpersControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n    const getColores = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().query(getTodosLosColores);\r\n            return res.json(result.recordset as Color[]);\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    \r\n    const getColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codColor', sql.TinyInt, req.params.codColor).execute(getColorProcedure);\r\n            return res.json((result.recordset as Color[])[0]);\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    const insertarColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const color = req.body.color as Color;\r\n            await pool.request()\r\n            .input('hex_code', sql.Char(6), color.hex_code)\r\n            .input('nombre', sql.VarChar(20), color.nombre).execute(agregarColorProcedure);\r\n            res.json({mensaje: 'Color Agregado'});\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const modificarColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const color = req.body.color as Color;\r\n\r\n            await pool.request()\r\n            .input('codColor', sql.TinyInt, color.codColor)\r\n            .input('hex_code', sql.Char(6), color.hex_code)\r\n            .input('nombre', sql.VarChar(20), color.nombre).execute(modificarColorProcedure);\r\n            res.json({mensaje: 'Color Modificado'});\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const insertarTrabajo = async (req: Request, res: Response) => {\r\n        try {\r\n            const trabajo = req.body.trabajo as Trabajo;\r\n            if (!comprobarTrabajo(trabajo)) {\r\n                const errorDeTrabajo = new Error('Datos enviados incorrectos');\r\n                return mandarError(errorDeTrabajo, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('titulo', sql.VarChar(40), trabajo.titulo)\r\n            .input('pago', sql.Decimal(19, 4), trabajo.pago)\r\n            .execute('insertar_trabajo');\r\n            if (result.recordset.length !== 1) {\r\n                return mandarError(new Error('Error Al Insertar'), res, configENV, 500);\r\n            }\r\n            res.json(result.recordset[0]);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getDepartamentos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().execute('listado_departamentos');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron departamentos'), res, configENV, 401);\r\n            }\r\n            return res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getProvincias = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codDepartamento', sql.VarChar(2), req.body.codDepartamento)\r\n            .execute('listado_provincias');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron provincias'), res, configENV, 401);\r\n            }\r\n            return res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n    \r\n    const getProveedores = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .execute('get_proveedores');\r\n            return res.json(result.recordset || []);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getDistritos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codProvincia', sql.VarChar(4), req.body.codProvincia)\r\n            .execute('listado_distritos');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron distritos'), res, configENV, 401);\r\n            }\r\n            return res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getUnidadesDeMedida = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .execute('get_unidades_de_medida');\r\n            return res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const agregarMarca = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.nombre) {\r\n                const error = new Error('No se entrego un nombre')\r\n                return mandarError(error, res, configENV, 500);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(20), req.body.nombre)\r\n            .input('logo', sql.VarChar(500), req.body.logo)\r\n            .input('info_extra', sql.VarChar(sql.MAX), req.body.info_extra)\r\n            .output('error', sql.Int)\r\n            .output('codMarca', sql.TinyInt)\r\n            .execute('add_marca')\r\n            if (result.output.error) {\r\n                const error = new Error('Esta Marca Ya Existe')\r\n                return mandarError(error, res, configENV, 500);\r\n            }\r\n            return res.json({codMarca: result.output.codMarca, nombre: req.body.nombre, logo: req.body.logo, info_extra: req.body.info_extra});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getMarcas = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().execute('get_marcas');\r\n            res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return { getColores, insertarColor, modificarColor, getColor, insertarTrabajo, getMarcas, getProveedores,\r\n        getDepartamentos, getProvincias, getDistritos, getUnidadesDeMedida, agregarMarca };\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\n\r\nexport const comprobarTrabajo = (trabajo: Trabajo): boolean => {\r\n    if (trabajo.pago && trabajo.pago > 0) {\r\n        return true;\r\n    }\r\n    if (trabajo.titulo && trabajo.titulo.length <= 40) {\r\n       return true; \r\n    }\r\n    return false;\r\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bcrypt\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonwebtoken\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios\");","import sql from 'mssql';\r\nimport { Response, Request, NextFunction } from 'express';\r\nimport { Usuario, Configuracion, InfoContacto, PersonaNatural } from '../lib/interfaces';\r\nimport { darDeAltaUsuarioSQL, darDeBajaUsuarioSQL, eliminarUsuarioSQL, getUsuarioSQL, insertarUsuario, reHabilitarUsuarioSQL, usuarioExisteLogin } from '../sql/sql-calls-strings';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport axios from 'axios';\r\n\r\nexport const tiposBusqueda = ['M', 'S', 'U', 'D'];\r\nexport const tiposEliminar = [0, 1, 2];\r\nconst noCodERROR = new Error('Este Usuario No Existe');\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const loginControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n\r\n    const registrar = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            const usuarioInfo = req.body.usuario as Usuario;\r\n            const infoContactoInfo = req.body.infoContacto as InfoContacto;\r\n            const personaNaturalInfo = req.body.personaNatural as PersonaNatural;\r\n\r\n            if (!comprobarDatosRegistro(usuarioInfo, infoContactoInfo, personaNaturalInfo)) {\r\n                const errorDeDatos = new Error('Datos incorrectos');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            const hashContrasena = await bcrypt.hash(usuarioInfo.contrasena_enviada, 10);\r\n\r\n            const result = await pool.request()\r\n            .input('codDistrito', sql.VarChar(6), infoContactoInfo.codDistrito)\r\n            .input('esAdmin', sql.Bit, usuarioInfo.esAdmin)\r\n            .input('celular', sql.VarChar(15), infoContactoInfo.celular)\r\n            .input('direccion_linea_uno', sql.VarChar(100), infoContactoInfo.direccion_linea_uno)\r\n            .input('direccion_linea_dos', sql.VarChar(100), infoContactoInfo.direccion_linea_dos)\r\n            .input('codigo_postal', sql.VarChar(15), infoContactoInfo.codigo_postal)\r\n            .input('correo_electronico', sql.NVarChar(255), infoContactoInfo.correo_electronico)\r\n            .input('DNI', sql.Char(8), personaNaturalInfo.DNI)\r\n            .input('nombre', sql.VarChar(60), personaNaturalInfo.nombre)\r\n            .input('apellido_uno', sql.VarChar(60), personaNaturalInfo.apellido_uno)\r\n            .input('apellido_dos', sql.VarChar(60), personaNaturalInfo.apellido_dos)\r\n            .input('fecha_nacimiento', sql.Date, personaNaturalInfo.fecha_nacimiento)\r\n            .input('username', sql.VarChar(20), usuarioInfo.username)\r\n            .input('contrasena', sql.Char(60), hashContrasena)\r\n            .output('codUsuario', sql.Int)\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(250))\r\n            .execute(insertarUsuario);\r\n\r\n            if (result.output.codUsuario === 0) {\r\n                const errorDeDatos = new Error('Usuario o usuario con este DNI ya existe');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Datos De Contacto Multiplicados' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            const usuarioRegistrado = result.recordset[0] as Usuario;\r\n            usuarioRegistrado.contrasena = undefined;\r\n            return res.json(usuarioRegistrado);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            const tipoDeBusqueda = (req.body.tipoDeBusqueda || 0) as number;\r\n            \r\n            if (!comprobarTipoDeBusqueda(tipoDeBusqueda)) {\r\n                const errorDeDatos = new Error('Tipo De Busqueda Invalido');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            const result = await pool.request()\r\n            .input('tipoDeBusqueda', sql.Char(1), tiposBusqueda[tipoDeBusqueda])\r\n            .input('codUsuario', sql.Int, req.body.codUsuario || null)\r\n            .input('username', sql.VarChar(20), req.body.username || null)\r\n            .input('DNI', sql.Char(8), req.body.DNI || null)\r\n            .execute(getUsuarioSQL);\r\n\r\n            if (result.recordset.length === 0) {\r\n                const errorDeDatos = new Error('No se encontro el usuario');\r\n                return mandarError(errorDeDatos, res, configENV, 404);\r\n            }\r\n\r\n            res.json(result.recordset.length === 1 ? result.recordset[0] : result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const usuarioExiste = async (req: Request, res: Response) =>{\r\n        try {\r\n            console.log('d');\r\n            const result = await pool.request()\r\n            .input('tipoDeBusqueda', sql.Char(1), 'U')\r\n            .input('codUsuario', sql.Int, null)\r\n            .input('username', sql.VarChar(20), req.body.username)\r\n            .input('DNI', sql.Char(8), null)\r\n            .execute(getUsuarioSQL);\r\n\r\n            res.json(result.recordset.length === 0 ? {existe: false} : {existe: true});\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const validarDNI = async (req: Request, res: Response) => {\r\n        try {\r\n            console.log(req.body.dni);\r\n            const result = await axios.post('https://api.migo.pe/api/v1/dni', \r\n            { token: configENV.tokenSUNAT, dni: req.body.dni });\r\n            res.json(result.data);\r\n        } catch (error) {\r\n            if (error.response.status) {\r\n                return res.json({success: false});\r\n            }\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const darDeAltaUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n\r\n            const codUsuario = req.body.codUsuario;\r\n            const codTrabajo = req.body.codTrabajo;\r\n\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .input('dado_alta', sql.Bit, true)\r\n            .input('codTrabajo', sql.TinyInt, codTrabajo)\r\n            .input('esAdmin', sql.Bit, req.body.esAdmin)\r\n            .input('fecha_entrada', sql.Date, req.body.fecha_entrada || new Date())\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(250))\r\n            .execute(darDeAltaUsuarioSQL);\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Datos Multiplicados' : `Error ${result.output.errorMSG}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (result.recordset.length !== 1) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            return res.json(result.recordset[0]);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const reHabilitarUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n    \r\n            const codUsuario = req.body.codUsuario;\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .output('updated', sql.Bit)\r\n            .execute(reHabilitarUsuarioSQL);\r\n    \r\n            if (!result.output.updated) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n    \r\n            return res.json({mensaje: 'Usuario Rehabilidado'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n\r\n    };\r\n\r\n    const darDeBajaUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const codUsuario = req.body.codUsuario;\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .output('updated', sql.Bit)\r\n            .execute(darDeBajaUsuarioSQL);\r\n            if (!result.output.updated) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            return res.json({mensaje: 'Usuario dado de baja'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getDatosCompletosUsuario = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const codUsuario = req.body.codUsuario;\r\n\r\n            const datosUsuario = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .execute('get_usuario_completo');\r\n\r\n            if (datosUsuario.recordset.length !== 1) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const datosCompletosUsuario = datosUsuario.recordset[0] as {codUsuario: string, DNI: string, codInfoContacto: string};\r\n            res.locals.datosCompletosUsuario = datosCompletosUsuario;\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const eliminarUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, req.body.codUsuario)\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(200))\r\n            .execute(eliminarUsuarioSQL);\r\n\r\n            if (result.rowsAffected.length === 0) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n\r\n            res.json({mensaje: 'Usuario eliminado'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const comprobarUsuarioExisteLogin = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!req.body.username) {\r\n                const errorUsuarioInvalido = new Error('Usuario Invalido');\r\n                return mandarError(errorUsuarioInvalido, res, configENV, 401);\r\n            }\r\n            const result = await pool.request()\r\n            .input('username', sql.VarChar(20), req.body.username)\r\n            .execute(usuarioExisteLogin);\r\n            if (!(result.recordset.length === 1)) {\r\n                const errorNoUser = new Error('El usuario no existe');\r\n                return mandarError(errorNoUser, res, configENV, 401);\r\n            }\r\n            if ((result.recordset[0] as Usuario).dado_alta === false) {\r\n                const errorNoAlta = new Error('El usuario no ha sido dado de alta');\r\n                return mandarError(errorNoAlta, res, configENV, 401);\r\n            }\r\n            res.locals.usuario = result.recordset[0];\r\n            console.log(res.locals.usuario.contrasena.toString());\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const comprobarContrasena = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const usuario = res.locals.usuario as Usuario;\r\n            if ((req.body.contrasena_enviada as string).length < 6) {\r\n                const errorContrasena = new Error('Contraseña Incorrecta');\r\n                return mandarError(errorContrasena, res, configENV, 403);\r\n            }\r\n            const contrasena = usuario.contrasena.toString();\r\n            const comparacion = await bcrypt.compare(req.body.contrasena_enviada, contrasena);\r\n            if (!comparacion) {\r\n                const errorContrasena = new Error('Contraseña Incorrecta');\r\n                return mandarError(errorContrasena, res, configENV, 403);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const enviarTokenLogin = async (req: Request, res: Response) => {\r\n        try {\r\n            const usuario = res.locals.usuario as Usuario;\r\n            usuario.contrasena_enviada = undefined;\r\n            usuario.contrasena = undefined;\r\n            const loginToken = \r\n            jwt.sign({ aud: `${usuario.codUsuario} ${usuario.username} ${usuario.esAdmin ? 'Administrador' : 'Personal'}`, \r\n            _id: usuario.codUsuario }, configENV.jwtKey);\r\n            return res.json({usuario, loginToken});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const loginRequired = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!res.locals.usuario) {\r\n                const error = new Error('Contenido protegido')\r\n                return mandarError(error, res, configENV, 401);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const adminLoginRequired = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!res.locals.usuario || res.locals.usuario.aud.split(' ')[2] !== 'Administrador') {\r\n                const error = new Error('Contenido protegido')\r\n                return mandarError(error, res, configENV, 401);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return { registrar, getUsuario, darDeAltaUsuario, darDeBajaUsuario, getDatosCompletosUsuario, enviarTokenLogin, validarDNI,\r\n        eliminarUsuario, comprobarUsuarioExisteLogin, comprobarContrasena, reHabilitarUsuario, usuarioExiste, loginRequired, adminLoginRequired };\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\nexport const comprobarDatosRegistro = (usuario: Usuario, infoContacto: InfoContacto, personaNatural: PersonaNatural): boolean => {\r\n    if (!comprobarUsuario(usuario) || !comprobarInfoContacto(infoContacto) || !comprobarPersonaNatural(personaNatural)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst comprobarUsuario = (usuario: Usuario) => {\r\n    const letterNumber = /^[0-9a-zA-Z]+$/;\r\n    if ((usuario.username.length > 20 || usuario.username.length < 3) && !usuario.username.match(letterNumber)) {\r\n        return false;\r\n    }\r\n    if (!usuario.contrasena_enviada.match(letterNumber)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst comprobarInfoContacto = (infoContacto: InfoContacto) => {\r\n    const onlyNumber = /^[0-9]+$/;\r\n    if (!infoContacto.celular.match(onlyNumber) && infoContacto.celular.length > 15) {\r\n        return false;\r\n    }\r\n    if (infoContacto.correo_electronico.length > 255) {\r\n        return false;\r\n    }\r\n    if (infoContacto.direccion_linea_uno.length > 100) {\r\n        return false;\r\n    }\r\n    if (infoContacto.direccion_linea_dos && infoContacto.direccion_linea_dos.length > 100) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst comprobarPersonaNatural = (personaNatural: PersonaNatural) => {\r\n    const onlyNumber = /^[0-9]+$/;\r\n    if (personaNatural.DNI.length !== 8 && personaNatural.DNI.match(onlyNumber)) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const comprobarTipoDeBusqueda = (tipo: number): boolean => {\r\n    if (tipo >= 0  && tiposBusqueda.length > tipo) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const comprobarTipoEliminar = (tipo: number): boolean => {\r\n    if (tiposEliminar.indexOf(tipo) === -1) {\r\n        return false;\r\n    }\r\n    return true;\r\n};","import sql from 'mssql';\r\nimport { Response, Request } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const materialesControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n    const crearTipoMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if(!esNombreTipoValido(req.body.tipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.tipoNombre)\r\n            .output('error', sql.Int)\r\n            .output('codTipoMaterial', sql.SmallInt)\r\n            .execute('add_tipo_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Tipo Añadido', \r\n            nuevoTipo: {codTipoMaterial: result.output.codTipoMaterial, nombre: req.body.tipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearSubTipoMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.subTipoNombre, req.body.codTipoMaterial)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.subTipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.subTipoNombre)\r\n            .input('codTipoMaterial', sql.SmallInt, req.body.codTipoMaterial)\r\n            .output('error', sql.Int)\r\n            .output('codSubTipoMaterial', sql.SmallInt)\r\n            .execute('add_sub_tipo_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Tipo Añadido', \r\n            nuevoSubTipo: {codSubTipoMaterial: result.output.codSubTipoMaterial, nombre: req.body.subTipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.nombreMaterial, req.body.codSubTipoMaterial, req.body.descripcion, req.body.unidad_medida, req.body.unidad_medida_uso)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.nombreMaterial)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(80), req.body.nombreMaterial)\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.body.codSubTipoMaterial)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('unidad_medida', sql.VarChar(3), req.body.unidad_medida)\r\n            .input('unidad_medida_uso', sql.VarChar(3), req.body.unidad_medida_uso)\r\n            .output('error', sql.Int)\r\n            .output('codMaterial', sql.Int)\r\n            .execute('add_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Material Añadido', \r\n            nuevoMaterial: {codMaterial: result.output.codMaterial, nombre: req.body.nombreMaterial, descripcion: req.body.descripcion, \r\n                unidad_medida: req.body.unidad_medida, unidad_medida_uso: req.body.unidad_medida_uso, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }; \r\n\r\n    const crearMaterialDefinido = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.nombre, req.body.codMaterial, req.body.codColor, \r\n                req.body.codMarca, req.body.precio_por_unidad, req.body.descripcion)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            \r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.nombre)\r\n            .input('codMaterial', sql.SmallInt, req.body.codMaterial)\r\n            .input('codColor', sql.TinyInt, req.body.codColor) \r\n            .input('codMarca', sql.TinyInt, req.body.codMarca)\r\n            .input('precio_por_unidad', sql.Decimal(19, 4), req.body.precio_por_unidad)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('colorNuevo', sql.Bit, req.body.codColor == 0 ? true : false)\r\n            .input('nombreColor', sql.VarChar(20), req.body.nombreColor)\r\n            .input('hex_code', sql.Char(6), req.body.hex_code)\r\n            .output('error', sql.Int)\r\n            .output('codMaterialDefinido', sql.Int)\r\n            .execute('add_material_definido');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Variante Añadido', nuevaVariante: result.recordset[0]});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearMaterialFisico = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.codMaterialDefinido, \r\n                req.body.cantidad_original, req.body.cantidad_gastada, req.body.codProveedor, req.body.valor)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, res.locals.usuario.aud.split(' ')[0])\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('cantidad_original', sql.Decimal(12, 2), req.body.cantidad_original)\r\n            .input('cantidad_gastada', sql.Decimal(12, 2), req.body.cantidad_gastada) \r\n            .input('codProveedor', sql.Int, req.body.codProveedor)\r\n            .input('valor', sql.Decimal(19, 4), req.body.valor)\r\n            .input('cod_factura', sql.VarChar(15), req.body.cod_factura)\r\n            .input('comentario', sql.VarChar(sql.MAX), req.body.comentario)\r\n            .output('error', sql.Int)\r\n            .output('codMaterialFisico', sql.Int)\r\n            .output('codIngresoMaterial', sql.Int)\r\n            .execute('agregar_material_fisico');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Producto Material Añadido', nuevoProductoMaterial: result.recordset[0]});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getAllTipos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, null)\r\n            .execute('get_tipo_material');\r\n            return res.json(result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    \r\n \r\n    const getTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, req.params.codTipoMaterial)\r\n            .execute('get_tipo_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este tipo de material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            return res.json({...result.recordsets[0][0],  subTipos: result.recordsets[1] || []}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterial = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterial', sql.SmallInt, req.params.codMaterial)\r\n            .execute('get_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            return res.json({...result.recordsets[0][0],  variantes: result.recordsets[1] || []}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getVariantesMaterialFiltro = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterial', sql.Int, req.body.codMaterial)\r\n            .input('codColor', sql.Int, req.body.codColor || null)\r\n            .input('codMarca', sql.Int, req.body.codMarca || null)\r\n            .input('precioMin', sql.Decimal(19, 4), req.body.precioMin || null)\r\n            .input('precioMax', sql.Decimal(19, 4), req.body.precioMax || null)\r\n            .input('texto', sql.VarChar(40), req.body.texto || null)\r\n            .execute('get_variantes_filtro');\r\n            return res.json({variantes: result.recordsets[0] || []}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterialFisicosFiltro = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('estado', sql.TinyInt, req.body.estado || 1)\r\n            .input('codProveedor', sql.Int, req.body.codProveedor == -1 ? null : req.body.codProveedor)\r\n            .input('desde_fecha', sql.Date, req.body.desde_fecha || null)\r\n            .input('hasta_fecha', sql.Date, req.body.hasta_fecha || null)\r\n            .execute('get_material_fisico_filtro');\r\n            return res.json({materialesFisicos: result.recordsets[0] || []}); \r\n        } catch (error) { \r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterialDefinido = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterialDefinido', sql.SmallInt, req.params.codMaterialDefinido)\r\n            .execute('get_material_definido');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            return res.json({...result.recordsets[0][0],  materialesProductos: result.recordsets[1] || []}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const getSubTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.params.codSubTipoMaterial)\r\n            .execute('get_sub_tipo_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este sub tipo de material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            return res.json({...result.recordsets[0][0],  materiales: result.recordsets[1] || []}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.codTipoMaterial, req.body.tipoNombre)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.tipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codTipoMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, req.body.codTipoMaterial)\r\n            .input('nombre', sql.VarChar(50), req.body.tipoNombre)\r\n            .output('error', sql.Int)\r\n            .execute('update_tipo_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Tipo Actualizado',\r\n            nuevoTipo: {codTipoMaterial: req.body.codTipoMaterial, nombre: req.body.tipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarMaterial = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.nombreMaterial, req.body.codMaterial, req.body.descripcion, req.body.unidad_medida, req.body.unidad_medida_uso)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.nombreMaterial)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(80), req.body.nombreMaterial)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('unidad_medida', sql.VarChar(3), req.body.unidad_medida)\r\n            .input('unidad_medida_uso', sql.VarChar(3), req.body.unidad_medida_uso)\r\n            .input('codMaterial', sql.Int, req.body.codMaterial)\r\n            .output('error', sql.Int)\r\n            .execute('update_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Material Actualizado',\r\n            nuevoMaterial: {codMaterial: req.body.codMaterial, nombre: req.body.nombreMaterial, descripcion: req.body.descripcion, \r\n                unidad_medida: req.body.unidad_medida, unidad_medida_uso: req.body.unidad_medida_uso, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarMaterialDefinido = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.nombre, req.body.codMaterialDefinido, req.body.codColor, req.body.codMarca, req.body.precio_por_unidad, req.body.descripcion)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.nombre)\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('codColor', sql.TinyInt, req.body.codColor) \r\n            .input('codMarca', sql.TinyInt, req.body.codMarca)\r\n            .input('precio_por_unidad', sql.Decimal(19, 4), req.body.precio_por_unidad)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('colorNuevo', sql.Bit, req.body.codColor == 0 ? true : false)\r\n            .input('nombreColor', sql.VarChar(20), req.body.nombreColor)\r\n            .input('hex_code', sql.Char(6), req.body.hex_code)\r\n            .output('error', sql.Int)\r\n            .execute('update_material_definido');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(`Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (!result.recordset[0]) {\r\n                const errorDeDatos = new Error(`No se encontro la variacion`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            return res.json({message: 'Variante Actualizada', nuevaVariante: result.recordset[0]});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarSubTipo = async (req: Request, res: Response) => {\r\n        \r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.subTipoNombre, req.body.codSubTipoMaterial)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.subTipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codSubTipoMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.body.codSubTipoMaterial)\r\n            .input('nombre', sql.VarChar(50), req.body.subTipoNombre)\r\n            .output('error', sql.Int)\r\n            .execute('update_sub_tipo_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Tipo Actualizado',\r\n            nuevoSubTipo: {codSubTipoMaterial: req.body.codSubTipoMaterial, nombre: req.body.subTipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return {crearTipoMaterial, getAllTipos, getTipo, editarTipo, crearSubTipoMaterial, getMaterial, crearMaterialFisico,\r\n        editarSubTipo, getSubTipo, crearMaterial, getVariantesMaterialFiltro, getMaterialFisicosFiltro,\r\n        editarMaterial, crearMaterialDefinido, editarMaterialDefinido, getMaterialDefinido};\r\n}\r\n\r\nexport const esNombreTipoValido = (nombreTipo: string): boolean => {\r\n    if (nombreTipo.length < 50) {\r\n        return true;\r\n    }\r\n    return false\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\n\r\nconst comprobarNoSonNulos = (...valores: unknown[]) => {\r\n    for (let index = 0; index < valores.length; index++) {\r\n        if (valores[index] === null || valores[index] === undefined || valores[index] === '') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","import { config } from 'mssql';\r\n\r\nexport class ConeccionSQL {\r\n    private configuracion: config;\r\n\r\n    constructor(server: string, user: string, password: string, database: string) {\r\n        this.configuracion = { server, database, user, password, options: { encrypt: true, trustServerCertificate: false } };\r\n    }\r\n\r\n    get getConfig(): config {\r\n        return this.configuracion;\r\n    }\r\n\r\n    /*\r\n    crearQuery(requestString: string): tedious.Request {\r\n        const request = new tedious.Request(requestString, null);\r\n        return request;\r\n    }\r\n\r\n    realizarQuery(requestString: string): Promise<{value: any, metadata: {colName: any}}[]> {\r\n        return new Promise((resolve, reject) => {\r\n            let rowsResult: any [];\r\n            const request = new tedious.Request(requestString, (err) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n            });\r\n            request.on('doneInProc', (rowCount, more, rows) => {\r\n                rows.forEach((r: {value: unknown, metadata: {colName: string}}[]) => {\r\n                    r.map(c => {\r\n                        console.log(c.value);\r\n                        return c.value\r\n                    });\r\n                });\r\n            })\r\n            request.on('requestCompleted', () => {\r\n                return resolve(rowsResult);\r\n            })\r\n            this.coneccion.execSql(request)\r\n        })\r\n    }\r\n\r\n    \r\n    conectar(): Promise<{conectado: boolean}> {\r\n        return new Promise((resolve, reject) => {\r\n            this.coneccion.connect();\r\n            this.coneccion.on('connect', (err) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                return resolve({conectado: true});\r\n            })\r\n        })\r\n    }*/\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"morgan\");","import compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport express, { Response, Request, NextFunction } from 'express';\r\nimport helmet from 'helmet';\r\nimport cors from 'cors';\r\nimport { rutasHelpers } from './routes/helpers-routes';\r\nimport { rutasLogin } from './routes/login-routes';\r\nimport { rutasMateriales } from './routes/materiales-routes';\r\nimport { Configuracion } from './lib/interfaces';\r\nimport { ConeccionSQL } from './lib/connect-to-sql';\r\nimport sql from 'mssql';\r\nimport jwt from 'jsonwebtoken';\r\nimport morgan from 'morgan';\r\nimport swaggerUI from 'swagger-ui-express';\r\n\r\n\r\nexport const app = async (configENV: Configuracion): Promise<express.Express> => {\r\n\r\n\r\n  const configuracionSQL = \r\n  new ConeccionSQL(configENV.servidorSQL, configENV.usuarioSQL, configENV.passwordSQL, configENV.baseDeDatosSQL).getConfig;\r\n\r\n  const app = express();\r\n  app.use(helmet());\r\n  app.use(compression())\r\n  app.use(cookieParser());\r\n\r\n  app.use(cors());\r\n\r\n  app.use(morgan(':method :url'));\r\n\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  app.use((req: Request, res: Response, next: NextFunction) => {\r\n    if (req.headers && req.headers.authorization &&\r\n      req.headers.authorization.split(' ')[0] === 'JWT') {\r\n        const auth = req.headers.authorization;\r\n        jwt.verify(auth.split(' ')[1], configENV.jwtKey, \r\n        {audience: `${auth.split(' ')[2]} ${auth.split(' ')[3]} ${auth.split(' ')[4]}`}, (err, decode) => {\r\n          console.log('qweqew');\r\n          if (err) {\r\n            res.locals.usuario = undefined;\r\n            return res.status(401).json({ message: 'BAD USER' });\r\n          }\r\n          else {\r\n            res.locals.usuario = decode;\r\n          }\r\n          next();  \r\n        });  \r\n      }\t\r\n      else {\r\n        res.locals.usuario = undefined;\r\n        next();\r\n      }\r\n  })\r\n\r\n  const pool = await sql.connect(configuracionSQL);\r\n\r\n  const routesHelper = rutasHelpers(configENV, pool);\r\n  const routesLogin = rutasLogin(configENV, pool);\r\n  const routesMateriales = rutasMateriales(configENV, pool);\r\n\r\n  app.use(routesHelper.ruta, routesHelper.router);\r\n  app.use(routesLogin.ruta, routesLogin.router);\r\n  app.use(routesMateriales.ruta, routesMateriales.router);\r\n\r\n  return app;\r\n}\r\n\r\n\r\n\r\n\r\n","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { helpersControladores } from '../controllers/helpers-control';\r\n\r\nexport const rutasHelpers = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/helper';\r\n\r\n    const controladores = helpersControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        configENV.log().info('Here');\r\n        res.send({mensaje: 'Rutas de helpers'});\r\n    });\r\n\r\n    router.get('/getUnidadesDeMedida', controladores.getUnidadesDeMedida);\r\n\r\n    router.get('/getColores', controladores.getColores);\r\n\r\n    router.get('/getProveedores', controladores.getProveedores);\r\n\r\n    router.get('/getMarcas', controladores.getMarcas)\r\n\r\n    router.get('/getColor/:codColor', controladores.getColor);\r\n\r\n    router.post('/insertarColor', controladores.insertarColor);\r\n\r\n    router.post('/modificarColor', controladores.modificarColor);\r\n\r\n    //* Trabajo\r\n\r\n    router.post('/insertarTrabajo', controladores.insertarTrabajo);\r\n\r\n    //* Ubicacion\r\n\r\n    router.get('/getDepartamentos', controladores.getDepartamentos);\r\n\r\n    router.post('/getProvincias', controladores.getProvincias);\r\n\r\n    router.post('/getDistritos', controladores.getDistritos);\r\n\r\n    router.post('/agregarMarca', controladores.agregarMarca);\r\n\r\n    return { router, ruta };\r\n};","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { loginControladores } from '../controllers/login-control';\r\n\r\nexport const rutasLogin = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/auth';\r\n\r\n    const controladores = loginControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        res.send({mensaje: 'Rutas de login'});\r\n    });\r\n\r\n    router.post('/getUsuario', controladores.getUsuario);\r\n\r\n    router.post('/darDeAltaUsuario', controladores.darDeAltaUsuario);\r\n\r\n    router.post('/darDeBajaUsuario', controladores.darDeBajaUsuario);\r\n\r\n    router.post('/reHabilitarUsuario', controladores.reHabilitarUsuario);\r\n\r\n    router.post('/eliminarUsuario', controladores.eliminarUsuario);\r\n\r\n    router.post('/registrar', controladores.adminLoginRequired, controladores.registrar);\r\n\r\n    router.post('/usuarioExiste', controladores.usuarioExiste);\r\n\r\n    router.post('/validarDNI', controladores.validarDNI);\r\n\r\n    router.post('/login', controladores.comprobarUsuarioExisteLogin, controladores.comprobarContrasena, controladores.enviarTokenLogin);\r\n\r\n    return { router, ruta };\r\n};","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { materialesControladores } from '../controllers/materiales-control';\r\nimport { loginControladores } from '../controllers/login-control';\r\n\r\nexport const rutasMateriales = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/materiales';\r\n\r\n    const controladores = materialesControladores(configENV, pool);\r\n\r\n    const controladoresAuth = loginControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        res.send({mensaje: 'Rutas de materiales'});\r\n    });\r\n\r\n    router.post('/getVariantesMaterialFiltro', controladores.getVariantesMaterialFiltro);\r\n\r\n    router.post('/getMaterialFisicosFiltro', controladores.getMaterialFisicosFiltro);\r\n\r\n    router.post('/crearTipoMaterial', controladores.crearTipoMaterial);\r\n\r\n    router.post('/crearSubTipoMaterial', controladores.crearSubTipoMaterial);\r\n\r\n    router.post('/editarSubTipo', controladores.editarSubTipo);\r\n\r\n    router.post('/editarMaterial', controladores.editarMaterial);\r\n\r\n    router.post('/crearMaterialDefinido', controladores.crearMaterialDefinido);\r\n\r\n    router.post('/crearMaterialFisico', controladores.crearMaterialFisico);\r\n\r\n    router.post('/editarMaterialDefinido', controladores.editarMaterialDefinido);\r\n\r\n    router.post('/crearMaterial', controladores.crearMaterial);\r\n\r\n    router.post('/editarTipo', controladores.editarTipo);\r\n\r\n    router.get('/getAllTipos', controladoresAuth.loginRequired, controladores.getAllTipos);\r\n \r\n    router.get('/getTipo/:codTipoMaterial', controladores.getTipo);\r\n\r\n    router.get('/getMaterial/:codMaterial', controladores.getMaterial);\r\n\r\n    router.get('/getSubTipo/:codSubTipoMaterial', controladores.getSubTipo);\r\n\r\n    router.get('/getMaterialDefinido/:codMaterialDefinido', controladores.getMaterialDefinido);\r\n\r\n    return { router, ruta };\r\n};","import http from 'http';\r\nimport { AddressInfo } from 'net';\r\nimport throng from 'throng';\r\nimport config from './config/config';\r\nimport { app } from './server/server';\r\n\r\nconst configENV = process.env.NODE_ENV === 'development' ? config.development : config.production;\r\n\r\nconst WORKERS = (process.env.WEB_CONCURRENCY || 1) as number;\r\n\r\nconst start = async (id: number) => {\r\n  try {\r\n    configENV.log().info(`Id Worker ${id}`);\r\n    const expressAPP = await app(configENV);\r\n    expressAPP.set('PORT', configENV.PORT || 0);\r\n    const server = http.createServer(expressAPP);\r\n    server.listen(expressAPP.get('PORT'));\r\n    server.on('listening', () => {\r\n      configENV.log().info('http://localhost:' + (server.address() as AddressInfo).port);\r\n    })\r\n  } catch (error) {\r\n    configENV.log().error(error)\r\n  }\r\n};\r\n\r\nthrong({ worker: start, count: WORKERS });\r\n\r\n\r\n\r\nexport const sumaTest = (nOne: number, nTwo: number): number => {\r\n  return nOne + nTwo;\r\n};"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","version","getLogger","serviceName","serviceVersion","name","development","PORT","process","env","link","servidorSQL","SERVIDOR_SQL","usuarioSQL","USUARIO_SQL","passwordSQL","PASSWORD_SQL","baseDeDatosSQL","BASE_DE_DATOS_NAME","jwtKey","JWT_TOKEN_KEY","tokenSUNAT","SUNAT_TOKEN","log","production","getUsuarioSQL","mandarError","error","res","configENV","numeroError","status","json","message","tiposBusqueda","noCodERROR","Error","loginControladores","pool","registrar","req","usuarioInfo","body","usuario","infoContactoInfo","infoContacto","personaNaturalInfo","personaNatural","comprobarDatosRegistro","errorDeDatos","hashContrasena","contrasena_enviada","result","request","input","codDistrito","esAdmin","celular","direccion_linea_uno","direccion_linea_dos","codigo_postal","correo_electronico","DNI","nombre","apellido_uno","apellido_dos","fecha_nacimiento","username","output","execute","codUsuario","usuarioRegistrado","recordset","contrasena","getUsuario","tipoDeBusqueda","comprobarTipoDeBusqueda","length","darDeAltaUsuario","codTrabajo","fecha_entrada","Date","errorMSG","darDeBajaUsuario","updated","mensaje","getDatosCompletosUsuario","next","datosUsuario","datosCompletosUsuario","locals","enviarTokenLogin","loginToken","aud","_id","validarDNI","console","dni","token","data","response","success","eliminarUsuario","rowsAffected","comprobarUsuarioExisteLogin","errorUsuarioInvalido","errorNoUser","dado_alta","errorNoAlta","toString","comprobarContrasena","errorContrasena","reHabilitarUsuario","usuarioExiste","existe","loginRequired","adminLoginRequired","split","comprobarUsuario","comprobarInfoContacto","comprobarPersonaNatural","letterNumber","match","tipo","esNombreTipoValido","nombreTipo","comprobarNoSonNulos","valores","index","ConeccionSQL","constructor","server","user","password","database","this","configuracion","options","encrypt","trustServerCertificate","app","configuracionSQL","getConfig","use","extended","headers","authorization","auth","audience","err","decode","routesHelper","router","Router","controladores","getColores","query","insertarColor","color","hex_code","modificarColor","codColor","getColor","params","insertarTrabajo","trabajo","pago","titulo","comprobarTrabajo","errorDeTrabajo","getMarcas","getProveedores","getDepartamentos","getProvincias","codDepartamento","getDistritos","codProvincia","getUnidadesDeMedida","agregarMarca","logo","info_extra","codMarca","helpersControladores","info","send","post","ruta","rutasHelpers","routesLogin","rutasLogin","routesMateriales","crearTipoMaterial","tipoNombre","errorInvalido","nuevoTipo","codTipoMaterial","deleted","getAllTipos","getTipo","recordsets","errorNoMaterial","subTipos","editarTipo","errorInvalidoCod","crearSubTipoMaterial","subTipoNombre","nuevoSubTipo","codSubTipoMaterial","getMaterial","codMaterial","variantes","crearMaterialFisico","codMaterialDefinido","cantidad_original","cantidad_gastada","codProveedor","valor","cod_factura","comentario","nuevoProductoMaterial","editarSubTipo","getSubTipo","materiales","crearMaterial","nombreMaterial","descripcion","unidad_medida","unidad_medida_uso","nuevoMaterial","getVariantesMaterialFiltro","precioMin","precioMax","texto","getMaterialFisicosFiltro","estado","desde_fecha","hasta_fecha","materialesFisicos","editarMaterial","crearMaterialDefinido","precio_por_unidad","nombreColor","nuevaVariante","editarMaterialDefinido","getMaterialDefinido","materialesProductos","materialesControladores","controladoresAuth","rutasMateriales","WORKERS","WEB_CONCURRENCY","worker","id","expressAPP","set","listen","on","address","port","count"],"sourceRoot":""}