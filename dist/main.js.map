{"version":3,"file":"main.js","mappings":"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","sources":["webpack://loscreadoresbackend/external \"tslib\"","webpack://loscreadoresbackend/external \"http\"","webpack://loscreadoresbackend/external \"throng\"","webpack://loscreadoresbackend/external \"bunyan\"","webpack://loscreadoresbackend/./src/config/config.ts","webpack://loscreadoresbackend/external \"compression\"","webpack://loscreadoresbackend/external \"cookie-parser\"","webpack://loscreadoresbackend/external \"express\"","webpack://loscreadoresbackend/external \"helmet\"","webpack://loscreadoresbackend/external \"cors\"","webpack://loscreadoresbackend/external \"mssql\"","webpack://loscreadoresbackend/./src/server/sql/sql-calls-strings.ts","webpack://loscreadoresbackend/./src/server/controllers/helpers-control.ts","webpack://loscreadoresbackend/external \"bcrypt\"","webpack://loscreadoresbackend/external \"jsonwebtoken\"","webpack://loscreadoresbackend/external \"axios\"","webpack://loscreadoresbackend/./src/server/controllers/login-control.ts","webpack://loscreadoresbackend/./src/server/controllers/materiales-control.ts","webpack://loscreadoresbackend/external \"morgan\"","webpack://loscreadoresbackend/external \"swagger-ui-express\"","webpack://loscreadoresbackend/./src/server/server.ts","webpack://loscreadoresbackend/./src/server/routes/helpers-routes.ts","webpack://loscreadoresbackend/./src/server/routes/login-routes.ts","webpack://loscreadoresbackend/./src/server/routes/materiales-routes.ts","webpack://loscreadoresbackend/./src/index.ts","webpack://loscreadoresbackend/./src/server/lib/connect-to-sql.ts","webpack://loscreadoresbackend/external \"dotenv\"","webpack://loscreadoresbackend/webpack/bootstrap","webpack://loscreadoresbackend/webpack/runtime/compat get default export","webpack://loscreadoresbackend/webpack/runtime/define property getters","webpack://loscreadoresbackend/webpack/runtime/hasOwnProperty shorthand","webpack://loscreadoresbackend/webpack/startup"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"tslib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"http\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"throng\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bunyan\");","// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nrequire('dotenv').config();\r\nimport bunyan from 'bunyan';\r\n\r\nimport pjs from '../../package.json';\r\n\r\nconst { version } = pjs;\r\n\r\nconst getLogger = (serviceName: string, serviceVersion: string) => \r\nbunyan.createLogger({ name: `${serviceName}:${serviceVersion}` });\r\n\r\nconst config = {\r\n\tdevelopment: {\r\n\t\tPORT: process.env.PORT,\r\n\t\tlink: 'http://localhost:5000/',\r\n        servidorSQL: process.env.SERVIDOR_SQL,\r\n        usuarioSQL: process.env.USUARIO_SQL,\r\n        passwordSQL: process.env.PASSWORD_SQL,\r\n        baseDeDatosSQL: process.env.BASE_DE_DATOS_NAME,\r\n        jwtKey: process.env.JWT_TOKEN_KEY,\r\n        tokenSUNAT: process.env.SUNAT_TOKEN,\r\n\t\tlog: (): bunyan => getLogger('DESARROLLO', version),\r\n\t},\r\n\r\n\tproduction: {\r\n\t\tPORT: process.env.PORT,\r\n\t\tlink: 'http://localhost:5000/',\r\n        servidorSQL: process.env.SERVIDOR_SQL,\r\n        usuarioSQL: process.env.USUARIO_SQL,\r\n        passwordSQL: process.env.PASSWORD_SQL,\r\n        baseDeDatosSQL: process.env.BASE_DE_DATOS_NAME,\r\n        jwtKey: process.env.JWT_TOKEN_KEY,\r\n        tokenSUNAT: process.env.SUNAT_TOKEN,\r\n        log: (): bunyan => getLogger('PRODUCCION', version),\r\n\t},\r\n};\r\n\r\nexport default config;\r\n\r\n\r\n\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"compression\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cookie-parser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"express\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"helmet\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"cors\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"mssql\");","export const getTodosLosColores = 'SELECT * FROM Color';\r\n\r\nexport const agregarColorProcedure = 'agregar_color';\r\n\r\nexport const modificarColorProcedure = 'modificar_color';\r\n\r\nexport const getColorProcedure = 'get_color';\r\n\r\n//* METODOS PARA USUARIO //\r\nexport const insertarUsuario = 'insertar_usuario';\r\n\r\nexport const getUsuarioSQL = 'get_usuarios';\r\n\r\nexport const darDeAltaUsuarioSQL = 'dar_de_alta_usuario'\r\n\r\nexport const reHabilitarUsuarioSQL = 're_habilitar_usuario'\r\n\r\nexport const eliminarUsuarioSQL = 'eliminar_usuario'\r\n\r\nexport const usuarioExisteLogin = 'comprobar_usuario_login';\r\n\r\nexport const darDeBajaUsuarioSQL = 'dar_de_baja_usuario'","import sql from 'mssql';\r\nimport { Response, Request } from 'express';\r\nimport { Color, Configuracion, Departamento, Distrito, Marca, Proveedor, Provincia, Trabajo, UnidadDeMedida } from '../lib/interfaces';\r\nimport { agregarColorProcedure, getColorProcedure, getTodosLosColores, modificarColorProcedure } from '../sql/sql-calls-strings';\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const helpersControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n    const getColores = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().query(getTodosLosColores);\r\n            const colores = result.recordset as Color[];\r\n            return res.json(colores);\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    \r\n    const getColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codColor', sql.TinyInt, req.params.codColor).execute(getColorProcedure);\r\n            return res.json((result.recordset as Color[])[0]);\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    const insertarColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const color = req.body.color as Color;\r\n            await pool.request()\r\n            .input('hex_code', sql.Char(6), color.hex_code)\r\n            .input('nombre', sql.VarChar(20), color.nombre).execute(agregarColorProcedure);\r\n            res.json({mensaje: 'Color Agregado'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const modificarColor = async (req: Request, res: Response) => {\r\n        try {\r\n            const color = req.body.color as Color;\r\n\r\n            await pool.request()\r\n            .input('codColor', sql.TinyInt, color.codColor)\r\n            .input('hex_code', sql.Char(6), color.hex_code)\r\n            .input('nombre', sql.VarChar(20), color.nombre).execute(modificarColorProcedure);\r\n            res.json({mensaje: 'Color Modificado'});\r\n        } catch (error) {\r\n            mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const insertarTrabajo = async (req: Request, res: Response) => {\r\n        try {\r\n            const trabajo = req.body.trabajo as Trabajo;\r\n            if (!comprobarTrabajo(trabajo)) {\r\n                const errorDeTrabajo = new Error('Datos enviados incorrectos');\r\n                return mandarError(errorDeTrabajo, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('titulo', sql.VarChar(40), trabajo.titulo)\r\n            .input('pago', sql.Decimal(19, 4), trabajo.pago)\r\n            .execute('insertar_trabajo');\r\n            if (result.recordset.length !== 1) {\r\n                return mandarError(new Error('Error Al Insertar'), res, configENV, 500);\r\n            }\r\n            res.json(result.recordset[0] as Trabajo);   \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getDepartamentos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().execute('listado_departamentos');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron departamentos'), res, configENV, 401);\r\n            }\r\n            const departamentos = result.recordset as Departamento[];\r\n            return res.json(departamentos);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getProvincias = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codDepartamento', sql.VarChar(2), req.body.codDepartamento)\r\n            .execute('listado_provincias');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron provincias'), res, configENV, 401);\r\n            }\r\n            const provincias = result.recordset as Provincia[];\r\n            return res.json(provincias);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n    \r\n    const getProveedores = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .execute('get_proveedores');\r\n            const proveedores = (result.recordset || []) as Proveedor[];\r\n            return res.json(proveedores);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getDistritos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().input('codProvincia', sql.VarChar(4), req.body.codProvincia)\r\n            .execute('listado_distritos');\r\n            if (result.recordset.length === 0) {\r\n                return mandarError(new Error('No se encontraron distritos'), res, configENV, 401);\r\n            }\r\n            const distritos = (result.recordset || []) as Distrito[];\r\n            return res.json(distritos);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getUnidadesDeMedida = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .execute('get_unidades_de_medida');\r\n            const unidadesDeMedida = (result.recordset || []) as UnidadDeMedida[];\r\n            return res.json(unidadesDeMedida);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const agregarMarca = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.nombre) {\r\n                const error = new Error('No se entrego un nombre')\r\n                return mandarError(error, res, configENV, 500);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(20), req.body.nombre)\r\n            .input('logo', sql.VarChar(500), req.body.logo)\r\n            .input('info_extra', sql.VarChar(sql.MAX), req.body.info_extra)\r\n            .output('error', sql.Int)\r\n            .output('codMarca', sql.TinyInt)\r\n            .execute('add_marca')\r\n            if (result.output.error) {\r\n                const error = new Error('Esta Marca Ya Existe')\r\n                return mandarError(error, res, configENV, 500);\r\n            }\r\n            return res.json({codMarca: result.output.codMarca, nombre: req.body.nombre, logo: req.body.logo, info_extra: req.body.info_extra});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getMarcas = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request().execute('get_marcas');\r\n            const marcas = result.recordset as Marca[];\r\n            res.json(marcas);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return { getColores, insertarColor, modificarColor, getColor, insertarTrabajo, getMarcas, getProveedores,\r\n        getDepartamentos, getProvincias, getDistritos, getUnidadesDeMedida, agregarMarca };\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\n\r\nexport const comprobarTrabajo = (trabajo: Trabajo): boolean => {\r\n    if (trabajo.pago && trabajo.pago > 0) {\r\n        return true;\r\n    }\r\n    if (trabajo.titulo && trabajo.titulo.length <= 40) {\r\n       return true; \r\n    }\r\n    return false;\r\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bcrypt\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonwebtoken\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"axios\");","import sql from 'mssql';\r\nimport { Response, Request, NextFunction } from 'express';\r\nimport { Usuario, Configuracion, InfoContacto, PersonaNatural } from '../lib/interfaces';\r\nimport { darDeAltaUsuarioSQL, darDeBajaUsuarioSQL, eliminarUsuarioSQL, getUsuarioSQL, insertarUsuario, reHabilitarUsuarioSQL, usuarioExisteLogin } from '../sql/sql-calls-strings';\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport axios from 'axios';\r\n\r\nexport const tiposBusqueda = ['M', 'S', 'U', 'D'];\r\nexport const tiposEliminar = [0, 1, 2];\r\nconst noCodERROR = new Error('Este Usuario No Existe');\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const loginControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n\r\n    const registrar = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            const usuarioInfo = req.body.usuario as Usuario;\r\n            const infoContactoInfo = req.body.infoContacto as InfoContacto;\r\n            const personaNaturalInfo = req.body.personaNatural as PersonaNatural;\r\n\r\n            if (!comprobarDatosRegistro(usuarioInfo, infoContactoInfo, personaNaturalInfo)) {\r\n                const errorDeDatos = new Error('Datos incorrectos');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            const hashContrasena = await bcrypt.hash(usuarioInfo.contrasena_enviada, 10);\r\n\r\n            const result = await pool.request()\r\n            .input('codDistrito', sql.VarChar(6), infoContactoInfo.codDistrito)\r\n            .input('esAdmin', sql.Bit, usuarioInfo.esAdmin)\r\n            .input('celular', sql.VarChar(15), infoContactoInfo.celular)\r\n            .input('direccion_linea_uno', sql.VarChar(100), infoContactoInfo.direccion_linea_uno)\r\n            .input('direccion_linea_dos', sql.VarChar(100), infoContactoInfo.direccion_linea_dos)\r\n            .input('codigo_postal', sql.VarChar(15), infoContactoInfo.codigo_postal)\r\n            .input('correo_electronico', sql.NVarChar(255), infoContactoInfo.correo_electronico)\r\n            .input('DNI', sql.Char(8), personaNaturalInfo.DNI)\r\n            .input('nombre', sql.VarChar(60), personaNaturalInfo.nombre)\r\n            .input('apellido_uno', sql.VarChar(60), personaNaturalInfo.apellido_uno)\r\n            .input('apellido_dos', sql.VarChar(60), personaNaturalInfo.apellido_dos)\r\n            .input('fecha_nacimiento', sql.Date, personaNaturalInfo.fecha_nacimiento)\r\n            .input('username', sql.VarChar(20), usuarioInfo.username)\r\n            .input('contrasena', sql.Char(60), hashContrasena)\r\n            .output('codUsuario', sql.Int)\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(250))\r\n            .execute(insertarUsuario);\r\n\r\n            if (result.output.codUsuario === 0) {\r\n                const errorDeDatos = new Error('Usuario o usuario con este DNI ya existe');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Datos De Contacto Multiplicados' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            const usuarioRegistrado = result.recordset[0] as Usuario;\r\n            usuarioRegistrado.contrasena = undefined;\r\n            return res.json(usuarioRegistrado);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const getUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            const tipoDeBusqueda = (req.body.tipoDeBusqueda || 0) as number;\r\n            \r\n            if (!comprobarTipoDeBusqueda(tipoDeBusqueda)) {\r\n                const errorDeDatos = new Error('Tipo De Busqueda Invalido');\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            const result = await pool.request()\r\n            .input('tipoDeBusqueda', sql.Char(1), tiposBusqueda[tipoDeBusqueda])\r\n            .input('codUsuario', sql.Int, req.body.codUsuario || null)\r\n            .input('username', sql.VarChar(20), req.body.username || null)\r\n            .input('DNI', sql.Char(8), req.body.DNI || null)\r\n            .execute(getUsuarioSQL);\r\n\r\n            if (result.recordset.length === 0) {\r\n                const errorDeDatos = new Error('No se encontro el usuario');\r\n                return mandarError(errorDeDatos, res, configENV, 404);\r\n            }\r\n\r\n            res.json(result.recordset.length === 1 ? result.recordset[0] : result.recordset);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const usuarioExiste = async (req: Request, res: Response) =>{\r\n        try {\r\n            const result = await pool.request()\r\n            .input('tipoDeBusqueda', sql.Char(1), 'U')\r\n            .input('codUsuario', sql.Int, null)\r\n            .input('username', sql.VarChar(20), req.body.username)\r\n            .input('DNI', sql.Char(8), null)\r\n            .execute(getUsuarioSQL);\r\n\r\n            res.json(result.recordset.length === 0 ? {existe: false} : {existe: true});\r\n\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const validarDNI = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await axios.post('https://api.migo.pe/api/v1/dni', \r\n            { token: configENV.tokenSUNAT, dni: req.body.dni });\r\n            res.json(result.data);\r\n        } catch (error) {\r\n            if (error.response.status) {\r\n                return res.json({success: false});\r\n            }\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }\r\n\r\n    const darDeAltaUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n\r\n            const codUsuario = req.body.codUsuario;\r\n            const codTrabajo = req.body.codTrabajo;\r\n\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .input('dado_alta', sql.Bit, true)\r\n            .input('codTrabajo', sql.TinyInt, codTrabajo)\r\n            .input('esAdmin', sql.Bit, req.body.esAdmin)\r\n            .input('fecha_entrada', sql.Date, req.body.fecha_entrada || new Date())\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(250))\r\n            .execute(darDeAltaUsuarioSQL);\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Datos Multiplicados' : `Error ${result.output.errorMSG}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (result.recordset.length !== 1) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            return res.json(result.recordset[0]);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const reHabilitarUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n    \r\n            const codUsuario = req.body.codUsuario;\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .output('updated', sql.Bit)\r\n            .execute(reHabilitarUsuarioSQL);\r\n    \r\n            if (!result.output.updated) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n    \r\n            return res.json({mensaje: 'Usuario Rehabilidado'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n\r\n    };\r\n\r\n    const darDeBajaUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const codUsuario = req.body.codUsuario;\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .output('updated', sql.Bit)\r\n            .execute(darDeBajaUsuarioSQL);\r\n            if (!result.output.updated) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            return res.json({mensaje: 'Usuario dado de baja'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getDatosCompletosUsuario = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const codUsuario = req.body.codUsuario;\r\n\r\n            const datosUsuario = await pool.request()\r\n            .input('codUsuario', sql.Int, codUsuario)\r\n            .execute('get_usuario_completo');\r\n\r\n            if (datosUsuario.recordset.length !== 1) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const datosCompletosUsuario = datosUsuario.recordset[0] as {codUsuario: string, DNI: string, codInfoContacto: string};\r\n            res.locals.datosCompletosUsuario = datosCompletosUsuario;\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const eliminarUsuario = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!req.body.codUsuario) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, req.body.codUsuario)\r\n            .output('error', sql.Int)\r\n            .output('errorMSG', sql.VarChar(200))\r\n            .execute(eliminarUsuarioSQL);\r\n\r\n            if (result.rowsAffected.length === 0) {\r\n                return mandarError(noCodERROR, res, configENV, 500);\r\n            }\r\n\r\n            res.json({mensaje: 'Usuario eliminado'});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const comprobarUsuarioExisteLogin = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!req.body.username) {\r\n                const errorUsuarioInvalido = new Error('Usuario Invalido');\r\n                return mandarError(errorUsuarioInvalido, res, configENV, 401);\r\n            }\r\n            const result = await pool.request()\r\n            .input('username', sql.VarChar(20), req.body.username)\r\n            .execute(usuarioExisteLogin);\r\n            if (!(result.recordset.length === 1)) {\r\n                const errorNoUser = new Error('El usuario no existe');\r\n                return mandarError(errorNoUser, res, configENV, 401);\r\n            }\r\n            if ((result.recordset[0] as Usuario).dado_alta === false) {\r\n                const errorNoAlta = new Error('El usuario no ha sido dado de alta');\r\n                return mandarError(errorNoAlta, res, configENV, 401);\r\n            }\r\n            res.locals.usuario = result.recordset[0];\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const comprobarContrasena = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            const usuario = res.locals.usuario as Usuario;\r\n            if ((req.body.contrasena_enviada as string).length < 6) {\r\n                const errorContrasena = new Error('Contraseña Incorrecta');\r\n                return mandarError(errorContrasena, res, configENV, 403);\r\n            }\r\n            const contrasena = usuario.contrasena.toString();\r\n            const comparacion = await bcrypt.compare(req.body.contrasena_enviada, contrasena);\r\n            if (!comparacion) {\r\n                const errorContrasena = new Error('Contraseña Incorrecta');\r\n                return mandarError(errorContrasena, res, configENV, 403);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const enviarTokenLogin = async (req: Request, res: Response) => {\r\n        try {\r\n            const usuario = res.locals.usuario as Usuario;\r\n            usuario.contrasena_enviada = undefined;\r\n            usuario.contrasena = undefined;\r\n            const loginToken = \r\n            jwt.sign({ aud: `${usuario.codUsuario} ${usuario.username} ${usuario.esAdmin ? 'Administrador' : 'Personal'}`, \r\n            _id: usuario.codUsuario }, configENV.jwtKey);\r\n            return res.json({usuario, loginToken});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const loginRequired = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!res.locals.usuario) {\r\n                const error = new Error('Contenido protegido')\r\n                return mandarError(error, res, configENV, 401);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const adminLoginRequired = async (req: Request, res: Response, next: NextFunction) => {\r\n        try {\r\n            if (!res.locals.usuario || res.locals.usuario.aud.split(' ')[2] !== 'Administrador') {\r\n                const error = new Error('Contenido protegido')\r\n                return mandarError(error, res, configENV, 401);\r\n            }\r\n            next();\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return { registrar, getUsuario, darDeAltaUsuario, darDeBajaUsuario, getDatosCompletosUsuario, enviarTokenLogin, validarDNI,\r\n        eliminarUsuario, comprobarUsuarioExisteLogin, comprobarContrasena, reHabilitarUsuario, usuarioExiste, loginRequired, adminLoginRequired };\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\nexport const comprobarDatosRegistro = (usuario: Usuario, infoContacto: InfoContacto, personaNatural: PersonaNatural): boolean => {\r\n    if (!comprobarUsuario(usuario) || !comprobarInfoContacto(infoContacto) || !comprobarPersonaNatural(personaNatural)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst comprobarUsuario = (usuario: Usuario) => {\r\n    const letterNumber = /^[0-9a-zA-Z]+$/;\r\n    if ((usuario.username.length > 20 || usuario.username.length < 3) && !usuario.username.match(letterNumber)) {\r\n        return false;\r\n    }\r\n    if (!usuario.contrasena_enviada.match(letterNumber)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst comprobarInfoContacto = (infoContacto: InfoContacto) => {\r\n    const onlyNumber = /^[0-9]+$/;\r\n    if (!infoContacto.celular.match(onlyNumber) && infoContacto.celular.length > 15) {\r\n        return false;\r\n    }\r\n    if (infoContacto.correo_electronico.length > 255) {\r\n        return false;\r\n    }\r\n    if (infoContacto.direccion_linea_uno.length > 100) {\r\n        return false;\r\n    }\r\n    if (infoContacto.direccion_linea_dos && infoContacto.direccion_linea_dos.length > 100) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nconst comprobarPersonaNatural = (personaNatural: PersonaNatural) => {\r\n    const onlyNumber = /^[0-9]+$/;\r\n    if (personaNatural.DNI.length !== 8 && personaNatural.DNI.match(onlyNumber)) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const comprobarTipoDeBusqueda = (tipo: number): boolean => {\r\n    if (tipo >= 0  && tiposBusqueda.length > tipo) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const comprobarTipoEliminar = (tipo: number): boolean => {\r\n    if (tiposEliminar.indexOf(tipo) === -1) {\r\n        return false;\r\n    }\r\n    return true;\r\n};","import sql from 'mssql';\r\nimport { Response, Request } from 'express';\r\nimport { Configuracion, Material, MaterialDefinido, MaterialFisico, SubTipoMaterial, TipoMaterial } from '../lib/interfaces';\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const materialesControladores = (configENV: Configuracion, pool: sql.ConnectionPool) => {\r\n    const crearTipoMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if(!esNombreTipoValido(req.body.tipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.tipoNombre)\r\n            .output('error', sql.Int)\r\n            .output('codTipoMaterial', sql.SmallInt)\r\n            .execute('add_tipo_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Tipo Añadido', \r\n            nuevoTipo: {codTipoMaterial: result.output.codTipoMaterial, nombre: req.body.tipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearSubTipoMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.subTipoNombre, req.body.codTipoMaterial)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.subTipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.subTipoNombre)\r\n            .input('codTipoMaterial', sql.SmallInt, req.body.codTipoMaterial)\r\n            .output('error', sql.Int)\r\n            .output('codSubTipoMaterial', sql.SmallInt)\r\n            .execute('add_sub_tipo_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Tipo Añadido', \r\n            nuevoSubTipo: {codSubTipoMaterial: result.output.codSubTipoMaterial, nombre: req.body.subTipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearMaterial = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.nombreMaterial, req.body.codSubTipoMaterial, req.body.descripcion, req.body.unidad_medida, req.body.unidad_medida_uso)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.nombreMaterial)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(80), req.body.nombreMaterial)\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.body.codSubTipoMaterial)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('unidad_medida', sql.VarChar(3), req.body.unidad_medida)\r\n            .input('unidad_medida_uso', sql.VarChar(3), req.body.unidad_medida_uso)\r\n            .output('error', sql.Int)\r\n            .output('codMaterial', sql.Int)\r\n            .execute('add_material');\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            return res.json({message: 'Material Añadido', \r\n            nuevoMaterial: {codMaterial: result.output.codMaterial, nombre: req.body.nombreMaterial, descripcion: req.body.descripcion, \r\n                unidad_medida: req.body.unidad_medida, unidad_medida_uso: req.body.unidad_medida_uso, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    }; \r\n\r\n    const crearMaterialDefinido = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.nombre, req.body.codMaterial, req.body.codColor, \r\n                req.body.codMarca, req.body.precio_por_unidad, req.body.descripcion)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            \r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.nombre)\r\n            .input('codMaterial', sql.SmallInt, req.body.codMaterial)\r\n            .input('codColor', sql.TinyInt, req.body.codColor) \r\n            .input('codMarca', sql.TinyInt, req.body.codMarca)\r\n            .input('precio_por_unidad', sql.Decimal(19, 4), req.body.precio_por_unidad)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('colorNuevo', sql.Bit, req.body.codColor == 0 ? true : false)\r\n            .input('nombreColor', sql.VarChar(20), req.body.nombreColor)\r\n            .input('hex_code', sql.Char(6), req.body.hex_code)\r\n            .output('error', sql.Int)\r\n            .output('codMaterialDefinido', sql.Int)\r\n            .execute('add_material_definido');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            const nuevaVariante =  result.recordset[0] as MaterialDefinido;\r\n            return res.json({message: 'Variante Añadido', nuevaVariante});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const crearMaterialFisico = async (req: Request, res: Response) => {\r\n        try{\r\n            if (!comprobarNoSonNulos(req.body.codMaterialDefinido, \r\n                req.body.cantidad_original, req.body.cantidad_gastada, req.body.codProveedor, req.body.valor)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n\r\n            const result = await pool.request()\r\n            .input('codUsuario', sql.Int, res.locals.usuario.aud.split(' ')[0])\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('cantidad_original', sql.Decimal(12, 2), req.body.cantidad_original)\r\n            .input('cantidad_gastada', sql.Decimal(12, 2), req.body.cantidad_gastada) \r\n            .input('codProveedor', sql.Int, req.body.codProveedor)\r\n            .input('valor', sql.Decimal(19, 4), req.body.valor)\r\n            .input('cod_factura', sql.VarChar(15), req.body.cod_factura)\r\n            .input('comentario', sql.VarChar(sql.MAX), req.body.comentario)\r\n            .output('error', sql.Int)\r\n            .output('codMaterialFisico', sql.Int)\r\n            .output('codIngresoMaterial', sql.Int)\r\n            .execute('agregar_material_fisico');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de material ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            } \r\n            const nuevoProductoMaterial = result.recordset[0] as MaterialFisico;\r\n            return res.json({message: 'Producto Material Añadido', nuevoProductoMaterial});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getAllTipos = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, null)\r\n            .execute('get_tipo_material');\r\n            // * Lista de materiales\r\n            return res.json(result.recordset as TipoMaterial[]);\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n    \r\n \r\n    const getTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, req.params.codTipoMaterial)\r\n            .execute('get_tipo_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este tipo de material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            const material = result.recordsets[0][0] as TipoMaterial;\r\n            const subTipos = (result.recordsets[1] || []) as SubTipoMaterial[];\r\n            // * Devuelve un tipo de material y su lista de sub-materiales\r\n            return res.json({...material,  subTipos}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterial = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterial', sql.SmallInt, req.params.codMaterial)\r\n            .execute('get_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            const material = result.recordsets[0][0] as Material;\r\n            const variantes = ( result.recordsets[1] || []) as MaterialDefinido[];\r\n            return res.json({...material,  variantes}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getVariantesMaterialFiltro = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterial', sql.Int, req.body.codMaterial)\r\n            .input('codColor', sql.Int, req.body.codColor || null)\r\n            .input('codMarca', sql.Int, req.body.codMarca || null)\r\n            .input('precioMin', sql.Decimal(19, 4), req.body.precioMin || null)\r\n            .input('precioMax', sql.Decimal(19, 4), req.body.precioMax || null)\r\n            .input('texto', sql.VarChar(40), req.body.texto || null)\r\n            .execute('get_variantes_filtro');\r\n            const variantes = (result.recordsets[0] || []) as MaterialDefinido[];\r\n            return res.json({variantes}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterialFisicosFiltro = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('estado', sql.TinyInt, req.body.estado || 1)\r\n            .input('codProveedor', sql.Int, req.body.codProveedor == -1 ? null : req.body.codProveedor)\r\n            .input('desde_fecha', sql.Date, req.body.desde_fecha || null)\r\n            .input('hasta_fecha', sql.Date, req.body.hasta_fecha || null)\r\n            .execute('get_material_fisico_filtro');\r\n            const materialesFisicos = (result.recordsets[0] || []) as MaterialFisico[];\r\n            return res.json({materialesFisicos}); \r\n        } catch (error) { \r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const getMaterialDefinido = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codMaterialDefinido', sql.SmallInt, req.params.codMaterialDefinido)\r\n            .execute('get_material_definido');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            const variante = result.recordsets[0][0] as MaterialDefinido;\r\n            const materialesProductos = (result.recordsets[1] || []) as MaterialFisico[];\r\n            return res.json({...variante,  materialesProductos}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const getSubTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            const result = await pool.request()\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.params.codSubTipoMaterial)\r\n            .execute('get_sub_tipo_material');\r\n            if (result.recordsets[0].length === 0) {\r\n                const errorNoMaterial = new Error('Este sub tipo de material no existe');\r\n                return mandarError(errorNoMaterial, res, configENV, 404);\r\n            }\r\n            const subTipo = result.recordsets[0][0] as SubTipoMaterial;\r\n            const materiales = (result.recordsets[1] || []) as Material[];\r\n            return res.json({...subTipo,  materiales}); \r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarTipo = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.codTipoMaterial, req.body.tipoNombre)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.tipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codTipoMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codTipoMaterial', sql.SmallInt, req.body.codTipoMaterial)\r\n            .input('nombre', sql.VarChar(50), req.body.tipoNombre)\r\n            .output('error', sql.Int)\r\n            .execute('update_tipo_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Tipo Actualizado',\r\n            nuevoTipo: {codTipoMaterial: req.body.codTipoMaterial, nombre: req.body.tipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarMaterial = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.nombreMaterial, req.body.codMaterial, req.body.descripcion, req.body.unidad_medida, req.body.unidad_medida_uso)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.nombreMaterial)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(80), req.body.nombreMaterial)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('unidad_medida', sql.VarChar(3), req.body.unidad_medida)\r\n            .input('unidad_medida_uso', sql.VarChar(3), req.body.unidad_medida_uso)\r\n            .input('codMaterial', sql.Int, req.body.codMaterial)\r\n            .output('error', sql.Int)\r\n            .execute('update_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Material Actualizado',\r\n            nuevoMaterial: {codMaterial: req.body.codMaterial, nombre: req.body.nombreMaterial, descripcion: req.body.descripcion, \r\n                unidad_medida: req.body.unidad_medida, unidad_medida_uso: req.body.unidad_medida_uso, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarMaterialDefinido = async (req: Request, res: Response) => {\r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.nombre, req.body.codMaterialDefinido, req.body.codColor, req.body.codMarca, req.body.precio_por_unidad, req.body.descripcion)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('nombre', sql.VarChar(50), req.body.nombre)\r\n            .input('codMaterialDefinido', sql.Int, req.body.codMaterialDefinido)\r\n            .input('codColor', sql.TinyInt, req.body.codColor) \r\n            .input('codMarca', sql.TinyInt, req.body.codMarca)\r\n            .input('precio_por_unidad', sql.Decimal(19, 4), req.body.precio_por_unidad)\r\n            .input('descripcion', sql.VarChar(sql.MAX), req.body.descripcion)\r\n            .input('colorNuevo', sql.Bit, req.body.codColor == 0 ? true : false)\r\n            .input('nombreColor', sql.VarChar(20), req.body.nombreColor)\r\n            .input('hex_code', sql.Char(6), req.body.hex_code)\r\n            .output('error', sql.Int)\r\n            .execute('update_material_definido');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(`Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n\r\n            if (!result.recordset[0]) {\r\n                const errorDeDatos = new Error(`No se encontro la variacion`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            const nuevaVariante = result.recordset[0] as MaterialDefinido;\r\n            return res.json({message: 'Variante Actualizada', nuevaVariante});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    const editarSubTipo = async (req: Request, res: Response) => {\r\n        \r\n        try {\r\n            if (!comprobarNoSonNulos(req.body.subTipoNombre, req.body.codSubTipoMaterial)) {\r\n                const error = new Error('Datos enviados incorrectamente');\r\n                return mandarError(error, res, configENV, 400);\r\n            }\r\n            if(!esNombreTipoValido(req.body.subTipoNombre)) {\r\n                const errorInvalido = new Error('Nombre Invalido');\r\n                return mandarError(errorInvalido, res, configENV, 400);\r\n            }\r\n            if (!req.body.codSubTipoMaterial) {\r\n                const errorInvalidoCod = new Error('Codigo Invalido');\r\n                return mandarError(errorInvalidoCod, res, configENV, 400);\r\n            }\r\n            const result = await pool.request()\r\n            .input('codSubTipoMaterial', sql.SmallInt, req.body.codSubTipoMaterial)\r\n            .input('nombre', sql.VarChar(50), req.body.subTipoNombre)\r\n            .output('error', sql.Int)\r\n            .execute('update_sub_tipo_material');\r\n\r\n            if (result.output.error) {\r\n                const errorDeDatos = new Error(result.output.error === 2627 ? 'Este nombre de tipo ya existe' : `Error ${result.output.error}`);\r\n                return mandarError(errorDeDatos, res, configENV, 400);\r\n            }\r\n            return res.json({message: 'Tipo Actualizado',\r\n            nuevoSubTipo: {codSubTipoMaterial: req.body.codSubTipoMaterial, nombre: req.body.subTipoNombre, deleted: false}});\r\n        } catch (error) {\r\n            return mandarError(error, res, configENV, 500);\r\n        }\r\n    };\r\n\r\n    return {crearTipoMaterial, getAllTipos, getTipo, editarTipo, crearSubTipoMaterial, getMaterial, crearMaterialFisico,\r\n        editarSubTipo, getSubTipo, crearMaterial, getVariantesMaterialFiltro, getMaterialFisicosFiltro,\r\n        editarMaterial, crearMaterialDefinido, editarMaterialDefinido, getMaterialDefinido};\r\n}\r\n\r\nexport const esNombreTipoValido = (nombreTipo: string): boolean => {\r\n    if (nombreTipo.length < 50) {\r\n        return true;\r\n    }\r\n    return false\r\n};\r\n\r\nconst mandarError = (error: Error, res: Response, configENV: Configuracion, numeroError: number) => {\r\n    configENV.log().error(error);\r\n    return res.status(numeroError).json({error: error.message});\r\n};\r\n\r\n\r\nconst comprobarNoSonNulos = (...valores: unknown[]) => {\r\n    for (let index = 0; index < valores.length; index++) {\r\n        if (valores[index] === null || valores[index] === undefined || valores[index] === '') {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"morgan\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"swagger-ui-express\");","import compression from 'compression';\r\nimport cookieParser from 'cookie-parser';\r\nimport express, { Response, Request, NextFunction } from 'express';\r\nimport helmet from 'helmet';\r\nimport cors from 'cors';\r\nimport { rutasHelpers } from './routes/helpers-routes';\r\nimport { rutasLogin } from './routes/login-routes';\r\nimport { rutasMateriales } from './routes/materiales-routes';\r\nimport { Configuracion } from './lib/interfaces';\r\nimport sql from 'mssql';\r\nimport jwt from 'jsonwebtoken';\r\nimport morgan from 'morgan';\r\nimport swaggerUI from 'swagger-ui-express';\r\nimport swaggerDoc from '../documentation/swaggerDocument.json';\r\n\r\n\r\nexport const app = (configENV: Configuracion, pool: sql.ConnectionPool): \r\nexpress.Express => {\r\n\r\n  const app = express();\r\n  app.use(helmet());\r\n  app.use(compression())\r\n  app.use(cookieParser());\r\n\r\n  app.use(cors());\r\n\r\n  app.use(morgan(':method :url'));\r\n\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  \r\n  app.use((req: Request, res: Response, next: NextFunction) => {\r\n    if (req.headers && req.headers.authorization &&\r\n      req.headers.authorization.split(' ')[0] === 'JWT') {\r\n        const auth = req.headers.authorization;\r\n        // * JWT #token #codUsuario #username #tipo\r\n        jwt.verify(auth.split(' ')[1], configENV.jwtKey, \r\n        {audience: `${auth.split(' ')[2]} ${auth.split(' ')[3]} ${auth.split(' ')[4]}`}, (err, decode) => {\r\n          if (err) {\r\n            res.locals.usuario = undefined;\r\n            return res.status(401).json({ message: 'BAD USER' });\r\n          }\r\n          else {\r\n            res.locals.usuario = decode;\r\n          }\r\n          next();  \r\n        });  \r\n      }\t\r\n      else {\r\n        res.locals.usuario = undefined;\r\n        next();\r\n      }\r\n  })\r\n\r\n  const routesHelper = rutasHelpers(configENV, pool);\r\n  const routesLogin = rutasLogin(configENV, pool);\r\n  const routesMateriales = rutasMateriales(configENV, pool);\r\n\r\n  app.use(routesHelper.ruta, routesHelper.router);\r\n  app.use(routesLogin.ruta, routesLogin.router);\r\n  app.use(routesMateriales.ruta, routesMateriales.router);\r\n\r\n  app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(swaggerDoc));\r\n  app.get('/', (req, res) => {\r\n    res.redirect('/api-docs');\r\n  });\r\n  return app;\r\n}\r\n\r\n\r\n\r\n\r\n","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { helpersControladores } from '../controllers/helpers-control';\r\nimport { loginControladores } from '../controllers/login-control';\r\n\r\nexport const rutasHelpers = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/helper';\r\n    const controladoresAuth = loginControladores(configENV, pool);\r\n\r\n    const controladores = helpersControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        configENV.log().info('Here');\r\n        res.send({mensaje: 'Rutas de helpers'});\r\n    });\r\n\r\n    router.get('/getUnidadesDeMedida', controladores.getUnidadesDeMedida);\r\n\r\n    router.get('/getColores', controladoresAuth.loginRequired, controladores.getColores);\r\n\r\n    router.get('/getProveedores', controladores.getProveedores);\r\n\r\n    router.get('/getMarcas', controladores.getMarcas)\r\n\r\n    router.get('/getColor/:codColor', controladores.getColor);\r\n\r\n    router.post('/insertarColor', controladores.insertarColor);\r\n\r\n    router.post('/modificarColor', controladores.modificarColor);\r\n\r\n    //* Trabajo\r\n\r\n    router.post('/insertarTrabajo', controladores.insertarTrabajo);\r\n\r\n    //* Ubicacion\r\n\r\n    router.get('/getDepartamentos', controladores.getDepartamentos);\r\n\r\n    router.post('/getProvincias', controladores.getProvincias);\r\n\r\n    router.post('/getDistritos', controladores.getDistritos);\r\n\r\n    router.post('/agregarMarca', controladores.agregarMarca);\r\n\r\n    return { router, ruta };\r\n};","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { loginControladores } from '../controllers/login-control';\r\n\r\nexport const rutasLogin = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/auth';\r\n\r\n    const controladores = loginControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        res.send({mensaje: 'Rutas de login'});\r\n    });\r\n\r\n    router.post('/getUsuario', controladores.getUsuario);\r\n\r\n    router.post('/darDeAltaUsuario', controladores.darDeAltaUsuario);\r\n\r\n    router.post('/darDeBajaUsuario', controladores.darDeBajaUsuario);\r\n\r\n    router.post('/reHabilitarUsuario', controladores.reHabilitarUsuario);\r\n\r\n    router.post('/eliminarUsuario', controladores.eliminarUsuario);\r\n\r\n    router.post('/registrar', controladores.adminLoginRequired, controladores.registrar);\r\n\r\n    router.post('/usuarioExiste', controladores.usuarioExiste);\r\n\r\n    router.post('/validarDNI', controladores.validarDNI);\r\n\r\n    router.post('/login', controladores.comprobarUsuarioExisteLogin, controladores.comprobarContrasena, controladores.enviarTokenLogin);\r\n\r\n    return { router, ruta };\r\n};","import { Router } from 'express';\r\nimport { Configuracion } from '../lib/interfaces';\r\nimport { ConnectionPool } from 'mssql';\r\nimport { materialesControladores } from '../controllers/materiales-control';\r\nimport { loginControladores } from '../controllers/login-control';\r\n\r\nexport const rutasMateriales = (configENV: Configuracion, pool: ConnectionPool): {router:Router, ruta: string} => {\r\n    const router = Router();\r\n    const ruta = '/materiales';\r\n\r\n    const controladores = materialesControladores(configENV, pool);\r\n\r\n    const controladoresAuth = loginControladores(configENV, pool);\r\n\r\n    router.get('/', (req, res) => {\r\n        res.send({mensaje: 'Rutas de materiales'});\r\n    });\r\n\r\n    router.post('/getVariantesMaterialFiltro', controladores.getVariantesMaterialFiltro);\r\n\r\n    router.post('/getMaterialFisicosFiltro', controladores.getMaterialFisicosFiltro);\r\n\r\n    router.post('/crearTipoMaterial', controladoresAuth.loginRequired, controladores.crearTipoMaterial);\r\n\r\n    router.post('/crearSubTipoMaterial', controladores.crearSubTipoMaterial);\r\n\r\n    router.post('/editarSubTipo', controladores.editarSubTipo);\r\n\r\n    router.post('/editarMaterial', controladores.editarMaterial);\r\n\r\n    router.post('/crearMaterialDefinido', controladores.crearMaterialDefinido);\r\n\r\n    router.post('/crearMaterialFisico', controladores.crearMaterialFisico);\r\n\r\n    router.post('/editarMaterialDefinido', controladores.editarMaterialDefinido);\r\n\r\n    router.post('/crearMaterial', controladores.crearMaterial);\r\n\r\n    router.post('/editarTipo', controladoresAuth.loginRequired, controladores.editarTipo);\r\n\r\n    router.get('/getAllTipos', controladoresAuth.loginRequired, controladores.getAllTipos);\r\n \r\n    router.get('/getTipo/:codTipoMaterial', controladoresAuth.loginRequired, controladores.getTipo);\r\n\r\n    router.get('/getMaterial/:codMaterial', controladores.getMaterial);\r\n\r\n    router.get('/getSubTipo/:codSubTipoMaterial', controladores.getSubTipo);\r\n\r\n    router.get('/getMaterialDefinido/:codMaterialDefinido', controladores.getMaterialDefinido);\r\n\r\n    return { router, ruta };\r\n};","import http from 'http';\r\nimport { AddressInfo } from 'net';\r\nimport throng from 'throng';\r\nimport config from './config/config';\r\nimport { app } from './server/server';\r\nimport { ConeccionSQL } from './server/lib/connect-to-sql';\r\nimport sql from 'mssql';\r\nimport { Configuracion } from './server/lib/interfaces';\r\n\r\nlet configENV: Configuracion;\r\n\r\nswitch (process.env.NODE_ENV) {\r\n  case 'development':\r\n      configENV = config.development;\r\n      break;\r\n  case 'production':\r\n      configENV = config.production;\r\n      break;\r\n  default:\r\n    configENV = config.development;\r\n    break;\r\n}\r\n\r\nconst WORKERS = (process.env.WEB_CONCURRENCY || 1) as number;\r\n\r\nconst configuracionSQL = \r\n  new ConeccionSQL(configENV.servidorSQL, configENV.usuarioSQL, \r\n    configENV.passwordSQL, configENV.baseDeDatosSQL).getConfig;\r\n\r\nconst start = async (id: number) => {\r\n  try {\r\n    configENV.log().info(`Id Worker ${id}`);\r\n    const pool = await sql.connect(configuracionSQL);\r\n    const expressAPP = app(configENV, pool);\r\n    expressAPP.set('PORT', configENV.PORT || 0);\r\n    const server = http.createServer(expressAPP);\r\n    server.listen(expressAPP.get('PORT'));\r\n    server.on('listening', () => {\r\n      configENV.log().info('http://localhost:' + (server.address() as AddressInfo).port);\r\n    });\r\n    server.on('close', () => {\r\n      pool.close();\r\n    })\r\n    return server;\r\n  } catch (error) {\r\n    configENV.log().error(error)\r\n    return null;\r\n  }\r\n};\r\n\r\nthrong({ worker: start, count: WORKERS });\r\n\r\nexport const sumaTest = (nOne: number, nTwo: number): number => {\r\n  return nOne + nTwo;\r\n};","import { config } from 'mssql';\r\n\r\nexport class ConeccionSQL {\r\n    private configuracion: config;\r\n\r\n    constructor(server: string, user: string, password: string, database: string) {\r\n        this.configuracion = { server, database, user, password, options: { encrypt: true, trustServerCertificate: false } };\r\n    }\r\n\r\n    get getConfig(): config {\r\n        return this.configuracion;\r\n    }\r\n\r\n    /*\r\n    crearQuery(requestString: string): tedious.Request {\r\n        const request = new tedious.Request(requestString, null);\r\n        return request;\r\n    }\r\n\r\n    realizarQuery(requestString: string): Promise<{value: any, metadata: {colName: any}}[]> {\r\n        return new Promise((resolve, reject) => {\r\n            let rowsResult: any [];\r\n            const request = new tedious.Request(requestString, (err) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n            });\r\n            request.on('doneInProc', (rowCount, more, rows) => {\r\n                rows.forEach((r: {value: unknown, metadata: {colName: string}}[]) => {\r\n                    r.map(c => {\r\n                        console.log(c.value);\r\n                        return c.value\r\n                    });\r\n                });\r\n            })\r\n            request.on('requestCompleted', () => {\r\n                return resolve(rowsResult);\r\n            })\r\n            this.coneccion.execSql(request)\r\n        })\r\n    }\r\n\r\n    \r\n    conectar(): Promise<{conectado: boolean}> {\r\n        return new Promise((resolve, reject) => {\r\n            this.coneccion.connect();\r\n            this.coneccion.on('connect', (err) => {\r\n                if (err) {\r\n                    return reject(err);\r\n                }\r\n                return resolve({conectado: true});\r\n            })\r\n        })\r\n    }*/\r\n}\r\n","module.exports = require(\"dotenv\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module doesn't tell about it's top-level declarations so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(733);\n"],"names":["require","version","getLogger","serviceName","serviceVersion","name","development","PORT","process","env","link","servidorSQL","SERVIDOR_SQL","usuarioSQL","USUARIO_SQL","passwordSQL","PASSWORD_SQL","baseDeDatosSQL","BASE_DE_DATOS_NAME","jwtKey","JWT_TOKEN_KEY","tokenSUNAT","SUNAT_TOKEN","log","production","getUsuarioSQL","mandarError","error","res","configENV","numeroError","status","json","message","tiposBusqueda","noCodERROR","Error","loginControladores","pool","registrar","req","usuarioInfo","body","usuario","infoContactoInfo","infoContacto","personaNaturalInfo","personaNatural","comprobarDatosRegistro","errorDeDatos","hashContrasena","contrasena_enviada","result","request","input","codDistrito","esAdmin","celular","direccion_linea_uno","direccion_linea_dos","codigo_postal","correo_electronico","DNI","nombre","apellido_uno","apellido_dos","fecha_nacimiento","username","output","execute","codUsuario","usuarioRegistrado","recordset","contrasena","undefined","getUsuario","tipoDeBusqueda","comprobarTipoDeBusqueda","length","darDeAltaUsuario","codTrabajo","fecha_entrada","Date","errorMSG","darDeBajaUsuario","updated","mensaje","getDatosCompletosUsuario","next","datosUsuario","datosCompletosUsuario","locals","enviarTokenLogin","loginToken","aud","_id","validarDNI","token","dni","data","response","success","eliminarUsuario","rowsAffected","comprobarUsuarioExisteLogin","errorUsuarioInvalido","errorNoUser","dado_alta","errorNoAlta","comprobarContrasena","errorContrasena","toString","reHabilitarUsuario","usuarioExiste","existe","loginRequired","adminLoginRequired","split","comprobarUsuario","comprobarInfoContacto","comprobarPersonaNatural","letterNumber","match","tipo","esNombreTipoValido","nombreTipo","comprobarNoSonNulos","valores","index","app","use","extended","headers","authorization","auth","audience","err","decode","routesHelper","router","Router","controladoresAuth","controladores","getColores","colores","query","insertarColor","color","hex_code","modificarColor","codColor","getColor","params","insertarTrabajo","trabajo","pago","titulo","comprobarTrabajo","errorDeTrabajo","getMarcas","marcas","getProveedores","proveedores","getDepartamentos","departamentos","getProvincias","codDepartamento","provincias","getDistritos","codProvincia","distritos","getUnidadesDeMedida","unidadesDeMedida","agregarMarca","logo","info_extra","codMarca","helpersControladores","get","info","send","post","ruta","rutasHelpers","routesLogin","rutasLogin","routesMateriales","crearTipoMaterial","tipoNombre","errorInvalido","nuevoTipo","codTipoMaterial","deleted","getAllTipos","getTipo","recordsets","errorNoMaterial","material","subTipos","editarTipo","errorInvalidoCod","crearSubTipoMaterial","subTipoNombre","nuevoSubTipo","codSubTipoMaterial","getMaterial","codMaterial","variantes","crearMaterialFisico","codMaterialDefinido","cantidad_original","cantidad_gastada","codProveedor","valor","cod_factura","comentario","nuevoProductoMaterial","editarSubTipo","getSubTipo","subTipo","materiales","crearMaterial","nombreMaterial","descripcion","unidad_medida","unidad_medida_uso","nuevoMaterial","getVariantesMaterialFiltro","precioMin","precioMax","texto","getMaterialFisicosFiltro","materialesFisicos","estado","desde_fecha","hasta_fecha","editarMaterial","crearMaterialDefinido","precio_por_unidad","nombreColor","nuevaVariante","editarMaterialDefinido","getMaterialDefinido","variante","materialesProductos","materialesControladores","rutasMateriales","redirect","WORKERS","WEB_CONCURRENCY","configuracionSQL","constructor","server","user","password","database","this","configuracion","options","encrypt","trustServerCertificate","getConfig","worker","id","expressAPP","set","listen","on","address","port","close","count","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call"],"sourceRoot":""}